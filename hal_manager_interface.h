/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c HALManagerInterface -p hal_manager_interface.h:hal_manager_interface.cpp manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef HAL_MANAGER_INTERFACE_H_1262073550
#define HAL_MANAGER_INTERFACE_H_1262073550

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.Hal.Manager
 */
class HALManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Hal.Manager"; }

public:
    HALManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~HALManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AcquireGlobalInterfaceLock(const QString &interface_name, bool exclusive)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(exclusive);
        return asyncCallWithArgumentList(QLatin1String("AcquireGlobalInterfaceLock"), argumentList);
    }

    inline QDBusPendingReply<> CommitToGdl(const QString &temporary_udi, const QString &global_udi)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(temporary_udi) << QVariant::fromValue(global_udi);
        return asyncCallWithArgumentList(QLatin1String("CommitToGdl"), argumentList);
    }

    inline QDBusPendingReply<bool> DeviceExists(const QString &udi)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(udi);
        return asyncCallWithArgumentList(QLatin1String("DeviceExists"), argumentList);
    }

    inline QDBusPendingReply<QStringList> FindDeviceByCapability(const QString &capability)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(capability);
        return asyncCallWithArgumentList(QLatin1String("FindDeviceByCapability"), argumentList);
    }

    inline QDBusPendingReply<QStringList> FindDeviceStringMatch(const QString &key, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("FindDeviceStringMatch"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetAllDevices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetAllDevices"), argumentList);
    }

    inline QDBusPendingReply<QString> NewDevice()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("NewDevice"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseGlobalInterfaceLock(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QLatin1String("ReleaseGlobalInterfaceLock"), argumentList);
    }

    inline QDBusPendingReply<> Remove(const QString &udi)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(udi);
        return asyncCallWithArgumentList(QLatin1String("Remove"), argumentList);
    }

    inline QDBusPendingReply<> SingletonAddonIsReady(const QString &command_line)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command_line);
        return asyncCallWithArgumentList(QLatin1String("SingletonAddonIsReady"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeviceAdded(const QString &udi);
    void DeviceRemoved(const QString &udi);
    void GlobalInterfaceLockAcquired(const QString &interface_name, const QString &lock_holder, int num_locks);
    void GlobalInterfaceLockReleased(const QString &interface_name, const QString &lock_holder, int num_locks);
    void NewCapability(const QString &udi, const QString &cap_name);
};

namespace org {
  namespace freedesktop {
    namespace DBus {
      typedef ::HALManagerInterface Introspectable;
    }
    namespace Hal {
      typedef ::HALManagerInterface Manager;
    }
  }
}
#endif
